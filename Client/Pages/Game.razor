@page "/game/{LobbyID}"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Text

@if (!bothPlayersJoined)
{
    <Gamemodal LobbyID="@LobbyID" />
}

@if (gameState != null)
{
    <ChessBoard isGameOver="@isCheckmate" LobbyID="@LobbyID" gameState="@gameState" hubConnection="@hubConnection" player="@player"></ChessBoard>
}


@code {
    public HubConnection? hubConnection;
    [Parameter]
    public string? LobbyID { get; set; }
    public int player = 0;
    public GameState? gameState { get; set; }
    public bool isCheckmate = false;  

    private bool bothPlayersJoined = false;
    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine(LobbyID);
        var response = await Http.GetAsync($"/lobby/{LobbyID}/join");
        var isLobbyFull = await response.Content.ReadAsStringAsync();


        if (isLobbyFull == "full")
        {
            Navigation.NavigateTo("/");
            return;
        }

        hubConnection = new HubConnectionBuilder()
           .WithUrl(Navigation.ToAbsoluteUri("/gamehub")).AddNewtonsoftJsonProtocol()

       .Build();

        Console.WriteLine(hubConnection.ConnectionId);
        hubConnection.On<GameState>("playerJoined", (gameStateServer) =>
            {

                gameState = gameStateServer;
                Console.WriteLine(gameStateServer.player1ConnectionID);

                bothPlayersJoined = true;

                StateHasChanged();
            });
        hubConnection.On<string>("playerDisconnected", (message) =>
       {
           Console.WriteLine(message);
           bothPlayersJoined = false;
           StateHasChanged(); 
       });
        hubConnection.On<GameState>("ReceiveGameState", async (gameStateServer)  =>
    {

        gameState = gameStateServer;

        if(gameStateServer.player1ConnectionID == hubConnection.ConnectionId){ player = 1; }
        if(gameStateServer.player2ConnectionID == hubConnection.ConnectionId) { player = 2; }


        Console.WriteLine(gameStateServer.player1ConnectionID);
        isCheckmate = await JSRuntime.InvokeAsync<bool>("chessFunctions.getCheckmateStatus", ToFen(gameState));
        StateHasChanged();

    });

        await hubConnection.StartAsync();
        
        await AddToLobby();
        
        Console.WriteLine(hubConnection.ConnectionId);
    }

    private async Task AddToLobby()
    {
        await hubConnection.SendAsync("JoinOrCreateLobby", hubConnection.ConnectionId, LobbyID);
    }

    public string ToFen(GameState gameState)
    {
        var fen = new StringBuilder();

        for (int i = 0; i < 8; i++)
        {
            int empty = 0;
            for (int j = 0; j < 8; j++)
            {
                var tile = gameState.Board[i, j];
                if (tile.Piece == "fa-sharp fa-solid")
                {
                    empty++;
                }
                else
                {
                    if (empty > 0)
                    {
                        fen.Append(empty);
                        empty = 0;
                    }
                    // Add piece to the FEN string
                    // Convert your Piece representation to a single character (p,n,b,r,q,k)
                    var pieceChar = ConvertPieceToChar(tile.Piece);
                    fen.Append(tile.PieceColor == "black" ? char.ToLower(pieceChar) : pieceChar);
                }
            }
            if (empty > 0)
            {
                fen.Append(empty);
            }
            fen.Append("/");
        }
        // Trimming last '/'
        fen.Remove(fen.Length - 1, 1);

        // Add other required FEN fields: active color, castling availability, en passant square, halfmove clock and fullmove number
        string activeColor = gameState.turnNumber % 2 == 0 ? "b" : "w";  // Assuming ActivePlayer is a new field in GameState
        fen.Append($" {activeColor} KQkq - 0 1");
        return fen.ToString();
    }

    public char ConvertPieceToChar(string piece)
    {
        if (piece == Pieces.Pawn)
        {
            return 'P';
        }
        else if (piece == Pieces.Rook)
        {
            return 'R';
        }
        else if (piece == Pieces.Knight)
        {
            return 'N';
        }
        else if (piece == Pieces.Bishop)
        {
            return 'B';
        }
        else if (piece == Pieces.Queen)
        {
            return 'Q';
        }
        else if (piece == Pieces.King)
        {
            return 'K';
        }
        else
        {
            throw new Exception("Unknown piece: " + piece);
        }
    }
}