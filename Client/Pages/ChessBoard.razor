@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChess.Shared
@using System.Text


@inject IJSRuntime JSRuntime

<h1>@player</h1>
<div  class="flex-col  justify-center items-center h-screen">
    <div class="chessboard-container">
        <div class="chessboard">
            @if(player==1){
            @for (var i = 0; i < 8; i++)
            {
                for (var j = 0; j < 8; j++)
                {
                    var tile = gameState.Board[i, j];
                    <div class=" @(IsPossibleMove(i,j) ? "bg-red-200 border border-red-800 " : (i + j) % 2 == 0 ? "bg-amber-300" : "bg-amber-600") flex justify-center items-center @(i == 0 && j == 0 ? "top-left" : "") @(i == 0 && j == 7 ? "top-right" : "") @(i == 7 && j == 0 ? "bottom-left" : "") @(i == 7 && j == 7 ? "bottom-right" : "") " @onclick="() => TileClicked(tile)">
                        <i id="@tile.Id" class="piece @(tile == selectedTile ? "fa-bounce" : "") @tile.Piece" style="color: @tile.PieceColor; font-size: 2.5rem; padding: 0.5rem;">
                            @(tile.Piece == "fa-sharp fa-solid" ? "\u200B" : null)
                        </i>
                    </div>
                }

            }
            }
              @if(player==2){
            @for (var i = 7; i >=0 ; i--)
            {
                for (var j = 7; j >=0; j--)
                {
                    var tile = gameState.Board[i, j];
                        <div class=" @(IsPossibleMove(i,j) ? "bg-red-200 border border-red-800" : (i + j) % 2 == 0 ? "bg-amber-300" : "bg-amber-600") flex justify-center items-center @(i == 0 && j == 0 ? "bottom-right" : "") @(i == 0 && j == 7 ? "bottom-left" : "") @(i == 7 && j == 0 ? "top-right" : "") @(i == 7 && j == 7 ? "top-left" : "") " @onclick="() => TileClicked(tile)">
                        <i id="@tile.Id" class="piece @(tile == selectedTile ? "fa-bounce" : "") @tile.Piece" style="color: @tile.PieceColor; font-size: 2.5rem; padding: 0.5rem;">
                            @(tile.Piece == "fa-sharp fa-solid" ? "\u200B" : null)
                        </i>
                    </div>
                }
            }
            }
                           

        </div>

        <p style="font-family:Courier New; font-weight:800; margin: 20px; padding:0;">Click on a piece to select it, if there are any valid moves they will show up. Some rules still not supported. </p>

    </div>
</div>


@if (isGameOver)
{
    <div class="fixed inset-0 flex items-center justify-center z-50">
        <div class="bg-white p-8 rounded-lg shadow-lg">
            <h2 class="text-xl text-red-800  font-bold mb-4">Game Over</h2>
        </div>
    </div>
}


@code {

    [Parameter] public int player { get; set; }
    [Parameter] public HubConnection? hubConnection { get; set; }
    [Parameter] public string? LobbyID { get; set; } 
    [Parameter] public bool isGameOver { get; set; }
    [Parameter] public GameState? gameState { get; set; }

    public List<string>? possiblemoves;
    public List<string>? possiblepromotions = new List<string>();


    GameState.Tile? selectedTile = null;




    async void TileClicked(GameState.Tile clickedTile)
    {
        // Checking player number and the piece's color
        string playerColor = player == 1 ? "white" : "black";
        if (gameState.turnNumber % 2 == 0 && playerColor == "white")
            return;

        if (gameState.turnNumber % 2 != 0 && playerColor == "black")
            return;

        if (clickedTile.PieceColor == playerColor)
        {
            var rawMoves = await JSRuntime.InvokeAsync<List<string>>("chessFunctions.getLegalMoves", FormatService.ToFen(gameState), FormatService.ConvertNotation(clickedTile.Row, clickedTile.Col));
            possiblemoves = rawMoves.Select(move => FormatService.ParseSan(move)).ToList();
            foreach (string move in possiblemoves)
            {
                if(move.Contains('=')){ possiblepromotions.Add(move);  }
                Console.WriteLine(move);
            }
        }

        if (clickedTile.PieceColor == playerColor)
        {
            if (possiblemoves.Count > 0)
            {
                selectedTile = clickedTile;
                StateHasChanged();
            }
            else
            {
                selectedTile=null;
                StateHasChanged();
            }
        }


        else
        {
            if (clickedTile != selectedTile && IsPossibleMove(clickedTile.Row, clickedTile.Col))
            {
                // Make the move
                bool ispromotion = possiblepromotions.Contains(FormatService.ConvertNotation(clickedTile.Row, clickedTile.Col) + '=');
                if (ispromotion)
                {
                    clickedTile.Piece = Pieces.Queen;

                }
                else
                {
                    clickedTile.Piece = selectedTile.Piece;
                }


                clickedTile.PieceColor = selectedTile.PieceColor;

                // Clear the selected tile
                selectedTile.Piece = "fa-sharp fa-solid";
                selectedTile.PieceColor = "";

                // Send the move to the server
                hubConnection.SendAsync("MakeMove", LobbyID, player, selectedTile.Row, selectedTile.Col, clickedTile.Row, clickedTile.Col, ispromotion);

                // Clear the selected tile
                selectedTile = null;
                possiblemoves.Clear();




            }
        }
    }


    public bool IsPossibleMove(int row, int col)
    {
        // Convert row and column to algebraic notation
        string notation = FormatService.ConvertNotation(row, col);

        // Check if the notation is in the list of possible mov
        return possiblemoves != null && (possiblemoves.Contains(notation) || possiblemoves.Contains(notation + '='));
    }
  
}