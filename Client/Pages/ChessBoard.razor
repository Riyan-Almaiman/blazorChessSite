@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChess.Shared
@using System.Text
@inject IJSRuntime JSRuntime

<h1>@player</h1>
<div id="app" class="flex justify-center items-center h-screen">
    <div class="chessboard-container">
        <div class="chessboard">
            @for (var i = 0; i < 8; i++)
            {
                for (var j = 0; j < 8; j++)
                {
                    var tile = gameState.Board[i, j];
                    <div class=" @(IsPossibleMove(i,j) ? "bg-red-300 border border-red-800 " : (i + j) % 2 == 0 ? "bg-cyan-300" : "bg-cyan-600") flex justify-center items-center @(i == 0 && j == 0 ? "top-left" : "") @(i == 0 && j == 7 ? "top-right" : "") @(i == 7 && j == 0 ? "bottom-left" : "") @(i == 7 && j == 7 ? "bottom-right" : "") " @onclick="() => TileClicked(tile)">
                        <i id="@tile.Id" class="piece @(tile == selectedTile ? "fa-bounce" : "") @tile.Piece" style="color: @tile.PieceColor; font-size: 2.5rem; padding: 0.5rem;">
                            @(tile.Piece == "fa-sharp fa-solid" ? "\u200B" : null)
                        </i>
                    </div>
                }
            }
        </div>
    </div>
</div>




@code {

    [Parameter] public int player { get; set; }
    [Parameter] public HubConnection? hubConnection { get; set; }
    [Parameter] public string LobbyID { get; set; }


    [Parameter] public GameState? gameState { get; set; }

    public List<string> possiblemoves; 
    GameState.Tile? selectedTile = null;

    protected override void OnInitialized()
    {

    }



    async void TileClicked(GameState.Tile clickedTile)
    {
        // Checking player number and the piece's color
        string playerColor = player == 1 ? "white" : "black";
        if (gameState.turnNumber % 2 == 0 && playerColor == "white")
            return;

        if (gameState.turnNumber % 2 != 0 && playerColor == "black")
            return;

        if (selectedTile == null || clickedTile.PieceColor == playerColor)
        {
            // If the clicked tile's color matches the player's color
            if (clickedTile.PieceColor == playerColor)
            {
                selectedTile = clickedTile;

                var rawMoves = await JSRuntime.InvokeAsync<List<string>>("chessFunctions.getLegalMoves", ToFen(gameState), ConvertNotation(selectedTile.Row, selectedTile.Col));
                possiblemoves = rawMoves.Select(move => ParseSan(move)).ToList();
                foreach (string move in possiblemoves)
                {
                    Console.WriteLine(move);
                }
                StateHasChanged();
            }
        }
        else
        {
            if (clickedTile != selectedTile && IsPossibleMove(clickedTile.Row, clickedTile.Col))
            {
                // Make the move
                clickedTile.Piece = selectedTile.Piece;
                clickedTile.PieceColor = selectedTile.PieceColor;

                // Clear the selected tile
                selectedTile.Piece = "fa-sharp fa-solid";
                selectedTile.PieceColor = "";

                // Send the move to the server
                hubConnection.SendAsync("MakeMove", LobbyID, player, selectedTile.Row, selectedTile.Col, clickedTile.Row, clickedTile.Col);

                // Clear the selected tile
                selectedTile = null;
                possiblemoves.Clear();
            }
        }
    }

    // Parse Standard Algebraic Notation (SAN) to get the destination tile of the move
    string ParseSan(string san)
    {
        // Remove check (+) and checkmate (#) symbols
        san = san.TrimEnd('+', '#');

        // Remove capture (x) symbol
        san = san.Replace("x", "");

        // If it's a pawn promotion, only keep the destination tile
        if (san.Contains("="))
        {
            san = san.Split('=')[0];
        }

        // The destination tile is the last two characters
        return san[^2..];
    }

    public string ConvertNotation(int row, int col)
    {
        // Convert row and column to algebraic notation
        char file = (char)('a' + col);
        int rank = 8 - row;
        return $"{file}{rank}";
    }
    public string ToFen(GameState gameState)
    {
        var fen = new StringBuilder();

        for (int i = 0; i < 8; i++)
        {
            int empty = 0;
            for (int j = 0; j < 8; j++)
            {
                var tile = gameState.Board[i, j];
                if (tile.Piece == "fa-sharp fa-solid")
                {
                    empty++;
                }
                else
                {
                    if (empty > 0)
                    {
                        fen.Append(empty);
                        empty = 0;
                    }
                    // Add piece to the FEN string
                    // Convert your Piece representation to a single character (p,n,b,r,q,k)
                    var pieceChar = ConvertPieceToChar(tile.Piece);
                    fen.Append(tile.PieceColor == "black" ? char.ToLower(pieceChar) : pieceChar);
                }
            }
            if (empty > 0)
            {
                fen.Append(empty);
            }
            fen.Append("/");
        }
        // Trimming last '/'
        fen.Remove(fen.Length - 1, 1);

        // Add other required FEN fields: active color, castling availability, en passant square, halfmove clock and fullmove number
        string activeColor = gameState.turnNumber%2 == 0 ? "b" : "w";  // Assuming ActivePlayer is a new field in GameState
        fen.Append($" {activeColor} KQkq - 0 1");
        return fen.ToString();
    }
   
   public char ConvertPieceToChar(string piece)
{
    if (piece == Pieces.Pawn)
    {
        return 'P';
    }
    else if (piece == Pieces.Rook)
    {
        return 'R';
    }
    else if (piece == Pieces.Knight)
    {
        return 'N';
    }
    else if (piece == Pieces.Bishop)
    {
        return 'B';
    }
    else if (piece == Pieces.Queen)
    {
        return 'Q';
    }
    else if (piece == Pieces.King)
    {
        return 'K';
    }
    else
    {
        throw new Exception("Unknown piece: " + piece);
    }
}
public bool IsPossibleMove(int row, int col)
{
    // Convert row and column to algebraic notation
    string notation = ConvertNotation(row, col);

    // Check if the notation is in the list of possible moves
    return possiblemoves != null && possiblemoves.Contains(notation);
}
  
}